package assetproviders

import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import play.api.mvc.Action
import play.api.mvc.Call
import play.api.mvc.AnyContent
import play.api.mvc.Controller
import org.specs2.mock.Mockito
import org.scalatest.FlatSpec
import org.scalatest.matchers.ShouldMatchers
import play.core.TestApplication
import controllers.EgraphsAssets
import play.api.test.Helpers._
import play.api.test.TestServer
import play.api.test.FakeRequest

@RunWith(classOf[JUnitRunner])
class FingerprintedAssetsTests extends FlatSpec with ShouldMatchers {
  val fileThatExists = "images/about-us.jpg"

  "FingerprintedAssets" should "be able to finger print the asset if they exist" in {
    running(TestServer(3333)) {
      EgraphsAssets.at(fileThatExists).url should include("-fp-")
      EgraphsAssets.at("images/does-not-exist.jpg").url should not include ("-fp-")
    }
  }

  it should "be able to find assets that have been finger printed" in {
    running(TestServer(3333)) {
      // make sure the route generated by finger printing can route back to the asset 
      val url = EgraphsAssets.at(fileThatExists).url
      val Some(result2) = routeAndCall(FakeRequest(GET, url))
      status(result2) should be(OK)
      contentType(result2) should be(Some("image/jpeg"))
    }
  }

  it should "not find the asset if the asset has a mismatching fingerprint" in {
    running(TestServer(3333)) {
      val Some(result) = routeAndCall(FakeRequest(GET, "/assets/images/about-us-fp-12345678.jpg"))
      status(result) should be(NOT_FOUND)
    }
  }
}