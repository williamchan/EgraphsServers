# This is the main configuration file for the application.
# ~~~~~
application.name=eGraphsServers


# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode=dev
%live.application.mode=prod
%demo.application.mode=prod
%staging.application.mode=prod

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=vccYaWUIWPOpqXbRD7xNdj31qWMUUzCQMaP0Ri76UlB1A3HIfIc2YtBRKvthwKoG


#
# Payment Configuration
# ~~~~
# Keys used to interact with our payment solution.

# What service provides our payment implementation? Options:
#   'yesmaam' - always accepts all payments regardless of input.
#   'stripe' - delegates payment processing to stripe.
payment.vendor=yesmaam
%live.payment.vendor=stripe
%demo.payment.vendor=yesmaam
%staging.payment.vendor=yesmaam

# Use our test stripe keys by default
stripe.key.publishable = pk_qIGUDirehUxj2GTFwgeRBkOfHIWdX
stripe.key.secret = pvESi1GjhD9e8RFQQPfeH8mHZ2GIyqQV

# In production use our actual keys. Uncomment this when we're ready to start
# charging cards.
# %live.stripe.key.publishable = pk_Z0zfJlLzGoi69QweXaKTC1TSAYWPt
# %live.stripe.key.secret = hQZcajnV5Ds1lOYtEZ0hfRazFXQgZ8fD


# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
# application.langs=fr,en,ja

# Date format
# ~~~~~
date.format=yyyy-MM-dd
# date.format.fr=dd/MM/yyyy


#
# Large file (Blob) storage
# ~~~~~
# Configuration for our blob storage solution, which is
# Amazon S3 in production and the file system when testing.
#

# Blobstore provider. Governs storage of egraph images, signature json, audio, other large
# binary streams.
#  "filesystem" - Stores blobs on the local file system
#  "s3" - Stores blobs on Amazon's Simple Storage Service (S3)
blobstore=filesystem
%live.blobstore=s3
%demo.blobstore=s3
%staging.blobstore=s3

# Namespace for our blobs. In S3 this is the bucket, and on the filesystem
# it's a folder.
blobstore.namespace=egraphs-test
%live.blobstore.namespace=egraphs
%demo.blobstore.namespace=egraphs-demo
%staging.blobstore.namespace=egraphs-staging

# Namespace for our static resource blobs on S3. This includes media and other large files.
staticresources.blobstore.namespace=egraphs-static-resources

# S3 credentials
s3.id=AKIAJ33ZTKZIPYXRC66A
s3.secret=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

# Whether to allow programmatic scrubbing of the blobstore. Because this would be
# catastrophic if it occurred in production, we should default it to "no" when we launch beta.
blobstore.allowscrub=yes
# %live.blobstore.allowscrub=no
%demo.blobstore.allowscrub=yes
%staging.blobstore.allowscrub=yes

# Database configuration
# ~~~~~ 
# Enable a database engine if needed.
#
# To quickly set up a development database, use either:
#   - mem : for a transient in memory database (H2 in memory)
#   - fs  : for a simple file written database (H2 file stored)
# db=mem

db.url=jdbc:postgresql://localhost/egraphs
db.driver=org.postgresql.Driver
db.user=root
db.pass=postgres

# Test MySQL server. Uncomment if you're using MySQL for development rather than Postgres.
#db.url=jdbc:mysql://localhost/egraphs?sessionVariables=storage_engine=InnoDB
#db.driver=com.mysql.jdbc.Driver
#db.user=egraphs
#db.pass=mysql

# Cloudbees database URL. See Cloudbees console for more info.
%live.db.url=jdbc:postgresql://ec2-23-21-139-77.compute-1.amazonaws.com:9999/postgres
%live.db.driver=org.postgresql.Driver
%live.db.user=postgres
%live.db.pass=448f4612c39f941

%demo.db.url=jdbc:postgresql://ec2-23-21-139-131.compute-1.amazonaws.com:9999/postgres
%demo.db.driver=org.postgresql.Driver
%demo.db.user=postgres
%demo.db.pass=d5b0da2eb127a05

%staging.db.url=jdbc:postgresql://ec2-107-21-229-179.compute-1.amazonaws.com:9999/postgres
%staging.db.driver=org.postgresql.Driver
%staging.db.user=postgres
%staging.db.pass=92DjQBSahKzq6jt

# Whether to check the database schema state before each request in DEV mode or before application start in PROD mode.
evolutions.enabled=false
# %live.evolutions.enabled=true
# %demo.evolutions.enabled=true
# %staging.evolutions.enabled=true

# Connections pool configuration :
db.pool.timeout=1000
db.pool.maxSize=30
db.pool.minSize=1

# Minimal pool size while we have the minimal cloudbees db size
%live.db.pool.timeout=10000
%live.db.pool.maxSize=30
%live.db.pool.minSize=1
%demo.db.pool.timeout=10000
%demo.db.pool.maxSize=30
%demo.db.pool.minSize=1
%staging.db.pool.timeout=10000
%staging.db.pool.maxSize=30
%staging.db.pool.minSize=1

# Hosting configuration
# ~~~~~
# Configure our website hosting.
#

# Cloudbees
bees.api.key=06B0F1905A5648B7
bees.api.secret=KL7DFBUNIZDOWQ67G6D1M5XKYTVPLRDWHS1COTCNU60=
bees.api.domain=egraphs

%live.bees.api.name=egraphs-alpha
%demo.bees.api.name=demo
%staging.bees.api.name=staging

# Whether to allow programmatic scrubbing of the database. Because this would be
# catastrophic if it occurred in production, we should default it to "no"
db.allowscrub=yes
# %live.db.allowscrub=no
%demo.db.allowscrub=yes
%staging.db.allowscrub=yes

# Mail configuration
# ~~~~~ 
# Default is to use a mock Mailer
mail.smtp=mock

%live.mail.smtp=real
%live.mail.smtp.host=smtp.gmail.com
%live.mail.smtp.user=webserver@egraphs.com
%live.mail.smtp.pass=catdoghouse

%demo.mail.smtp=real
%demo.mail.smtp.host=smtp.gmail.com
%demo.mail.smtp.user=webserver@egraphs.com
%demo.mail.smtp.pass=catdoghouse

staging.mail.smtp=mock


#
# Signature Biometrics Configuration
# ~~~~

# What service provides our payment implementation? Options:
#   'yesmaam' - always enrolls and verifies.
#   'testlab' - testlab.xyzmo.com
#   'xyzmoprod' - our live Xyzmo server
signature.vendor=yesmaam
%live.signature.vendor=xyzmoprod
%demo.signature.vendor=yesmaam
%staging.signature.vendor=testlab


#
# Voice Biometrics Configuration
# ~~~~

# What service provides our payment implementation? Options:
#   'yesmaam' - always enrolls and verifies.
#   'fsdev' - dev account for Free Speech engine at VBG.
#   'fsprod' - prod account for Free Speech engine at VBG.
voice.vendor=yesmaam
%live.voice.vendor=fsprod
%demo.voice.vendor=yesmaam
%staging.voice.vendor=fsdev

#
# JVM Configuration
# ~~~~
#
%test.jvm.memory=-Xmx1024M -Xms32M

#######
####### OTHER CONFIGURATION OPTIONS THAT WE HAVEN'T CUSTOMIZED
#######

# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
# http.port=9000
#
# By default the server listen for HTTP on the wilcard address.
# You can restrict this.
# http.address=127.0.0.1
#
# Use this if you don't host your Play application at the root of the domain
# you're serving it from. This parameter has no effect when deployed as a
# war, because the path will be handled by the application server.
# http.path=/

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
# application.session.cookie=PLAY
# application.session.maxAge=1h
# application.session.secure=false

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com

# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
# jpda.port=8000
#
# Java source level => 1.5, 1.6 or 1.7 (experimental)
# java.source=1.5

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory
# application.log=INFO
#
# More logging configuration
# application.log.path=/log4j.properties
# application.log.system.out=off

#
# If you want to reuse an existing Datasource from your application server, use:
# db=java:/comp/env/jdbc/myDatasource
#
# When using an existing Datasource, it's sometimes needed to destroy it when
# the application is stopped. Depending on the datasource, you can define a
# generic "destroy" method :
# db.destroyMethod=close

# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
# jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
#
# Specify the ddl generation pattern to use. Set to none to disable it
# (default to update in DEV mode, and none in PROD mode):
# jpa.ddl=update
#
# Debug SQL statements (logged using DEBUG level):
# jpa.debugSQL=true
#
# You can even specify additional hibernate properties here:
# hibernate.use_sql_comments=true
# ...
#
# Store path for Blob content
attachments.path=data/attachments

# Memcached configuration
# ~~~~~
# Enable memcached if needed. Otherwise a local cache is used.
# memcached=enabled
#
# Specify memcached host (default to 127.0.0.1:11211)
# memcached.host=127.0.0.1:11211
#
# Or you can specify multiple host to build a distributed cache
# memcached.1.host=127.0.0.1:11211
# memcached.2.host=127.0.0.1:11212
#
# Use plain SASL to authenticate for memcached
# memcached.user=
# memcached.password=

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# http.cacheControl=3600

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
# http.useETag=true

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
# %test.application.baseUrl=http://localhost:9000/
# %live.application.baseUrl=http://www.yourdomain.com/

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
# play.jobs.pool=10

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
# play.pool=3

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s
