# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

###
### Test routes
###

GET     /test/scenarios                          controllers.website.nonproduction.ScenarioController.list
GET     /test/scenarios/clear                    controllers.website.nonproduction.ScenarioController.clear
GET     /test/scenarios/:urlSlug                 controllers.website.nonproduction.ScenarioController.scenario(urlSlug: String)
GET     /test/request-transaction/without-error controllers.website.nonproduction.TransactionTestController.makeAccount
GET     /test/request-transaction/with-error    controllers.website.nonproduction.TransactionTestController.makeAccountAndThrowException
GET     /test/request-transaction/is-stored     controllers.website.nonproduction.TransactionTestController.isStored
GET     /test/log-stuff-then-die                controllers.website.nonproduction.TestControllers.logStuffThenThrowException
GET     /test/throwError                        controllers.website.nonproduction.TestControllers.throwError(error: String)

###
### Production routes
###

##
## Defaults
##

# Need this TRUE conditional, otherwise the if (play.id == test) conditional from above
# applies to ALL THE REST OF THE ROUTES.
#%{ if (true) }%

# Home page
GET     /blob/files/*blobKey                                       controllers.WebsiteControllers.getBlob(blobKey: String)

# Map static resources from the /app/public folder to the /public path
#GET     /public/                                staticDir:public
#GET     /favicon.ico                            staticFile:/public/images/favicon.ico
#GET     /documents/CelebrityAgreement           staticFile:/public/documents/CelebrityAgreement.pdf


##
## API
##
#%{ api = '/api/1.0' }%

#GET     ${api}/celebrities/{celebrityId}                           controllers.ApiControllers.getCelebrity
#GET     ${api}/celebrities/{celebrityId}/enrollmenttemplate        controllers.ApiControllers.getCelebrityEnrollmentTemplate
#GET     ${api}/celebrities/{celebrityId}/mobileappinfo             controllers.ApiControllers.getCelebrityMobileAppInfo
#GET     ${api}/celebrities/{celebrityId}/products                  controllers.ApiControllers.getCelebrityProducts
#GET     ${api}/celebrities/{celebrityId}/orders                    controllers.ApiControllers.getCelebrityOrders
#POST    ${api}/celebrities/{celebrityId}/orders/{orderId}          controllers.ApiControllers.postCelebrityOrder
#POST    ${api}/celebrities/{celebrityId}/enrollmentsamples         controllers.ApiControllers.postEnrollmentSample
#POST    ${api}/celebrities/{celebrityId}/orders/{orderId}/egraphs  controllers.ApiControllers.postEgraph

##
## Admin
##
GET      /admin                                                    				controllers.WebsiteControllers.getRootAdmin
GET      /admin/accounts                                           				controllers.WebsiteControllers.getAccountsAdmin
POST     /admin/accounts                                           				controllers.WebsiteControllers.postAccountAdmin
GET      /admin/accounts/$accountId<[0-9]+>                        				controllers.WebsiteControllers.getAccountAdmin(accountId: Long)
GET      /admin/celebrities                                        				controllers.WebsiteControllers.getCelebritiesAdmin(page: Int = 1)
#POST    /admin/celebrities                                        				controllers.WebsiteControllers.postCelebrityAdmin
GET      /admin/celebrities/search                                 				controllers.WebsiteControllers.getCelebritiesBySearchAdmin
GET      /admin/celebrities/create                                 				controllers.WebsiteControllers.getCreateCelebrityAdmin
POST     /admin/celebrities/featured                               				controllers.WebsiteControllers.postFeaturedCelebrities
GET      /admin/celebrities/$celebrityId<[0-9]+>                          controllers.WebsiteControllers.getCelebrityAdmin(celebrityId: Long)
GET      /admin/celebrities/$celebrityId<[0-9]+>/egraphs                  controllers.WebsiteControllers.getCelebrityEgraphsAdmin(celebrityId: Long, filter: String = "pendingAdminReview", page: Int = 1)
GET      /admin/celebrities/$celebrityId<[0-9]+>/inventorybatches         controllers.WebsiteControllers.getCelebrityInventoryBatchesAdmin(celebrityId: Long, filter: String = "all", page: Int = 1)
#POST    /admin/celebrities/$celebrityId<[0-9]+>/inventorybatches         controllers.WebsiteControllers.postCelebrityInventoryBatchAdmin(celebrityId: Long)
GET      /admin/celebrities/$celebrityId<[0-9]+>/inventorybatches/create  controllers.WebsiteControllers.getCreateCelebrityInventoryBatchAdmin(celebrityId: Long)
GET      /admin/celebrities/$celebrityId<[0-9]+>/orders                   controllers.WebsiteControllers.getCelebrityOrdersAdmin(celebrityId: Long, filter: String = "pendingAdminReview", page: Int = 1)
GET      /admin/celebrities/$celebrityId<[0-9]+>/products                 controllers.WebsiteControllers.getCelebrityProductsAdmin(celebrityId: Long, page: Int = 1)
#POST    /admin/celebrities/$celebrityId<[0-9]+>/products                 controllers.WebsiteControllers.postCelebrityProductAdmin(celebrityId: Long)
GET      /admin/celebrities/$celebrityId<[0-9]+>/products/create          controllers.WebsiteControllers.getCreateCelebrityProductAdmin(celebrityId: Long)
POST     /admin/celebrities/$celebrityId<[0-9]+>/sendEmail                controllers.WebsiteControllers.postSendCelebrityWelcomeEmailAdmin(celebrityId: Long)
GET      /admin/egraphs                                            				controllers.WebsiteControllers.getEgraphsAdmin(filter: String = "pendingAdminReview", page: Int = 1)
GET      /admin/egraphs/$egraphId<[0-9]+>                                 controllers.WebsiteControllers.getEgraphAdmin(egraphId: Long)
#POST    /admin/egraphs/$egraphId<[0-9]+>                                 controllers.WebsiteControllers.postEgraphAdmin(egraphId: Long)
GET      /admin/inventorybatches/$inventoryBatchId<[0-9]+>                controllers.WebsiteControllers.getInventoryBatchAdmin(inventoryBatchId: Long)
GET      /admin/login                                              				controllers.WebsiteControllers.getLoginAdmin
POST     /admin/login                                              				controllers.WebsiteControllers.postLoginAdmin
GET      /admin/orders                                             				controllers.WebsiteControllers.getOrdersAdmin(filter: String = "pendingAdminReview", page: Int = 1)
GET      /admin/orders/$orderId<[0-9]+>                                   controllers.WebsiteControllers.getOrderAdmin(orderId: Long)
#POST    /admin/orders/$orderId<[0-9]+>                                   controllers.WebsiteControllers.postOrderAdmin(orderId: Long)
GET      /admin/products/$productId<[0-9]+>                               controllers.WebsiteControllers.getProductAdmin(productId: Long)
GET      /admin/reports                                            				controllers.WebsiteControllers.getReportsAdmin
GET      /admin/tools                                              				controllers.WebsiteControllers.getToolsAdmin

##
## Consumer Website
##

GET     /                                                           controllers.WebsiteControllers.getRootConsumerEndpoint
GET     /about                                                      controllers.WebsiteControllers.getAbout
GET     /account/settings                                           controllers.WebsiteControllers.getAccountSettings
POST    /account/settings                                           controllers.WebsiteControllers.postAccountSettings
GET     /account/recover                                            controllers.WebsiteControllers.getRecoverAccount
POST    /account/recover                                            controllers.WebsiteControllers.postRecoverAccount
GET     /account/reset                                              controllers.WebsiteControllers.getResetPassword(email: String, secretKey: String)
POST    /account/reset                                              controllers.WebsiteControllers.postResetPassword
GET     /account/verify                                             controllers.WebsiteControllers.getVerifyAccount(email: String, resetKey: String)
GET     /account/:galleryCustomerId/gallery                         controllers.WebsiteControllers.getCustomerGalleryById(galleryCustomerId: Long)
GET     /account/:username                                          controllers.WebsiteControllers.getCustomerGalleryByUsername(username: String)
GET     /careers                                                    controllers.WebsiteControllers.getCareers
GET     /egraph/$orderId<[0-9]+>                                    controllers.WebsiteControllers.getEgraphRedirect(orderId: Long)
GET     /$orderId<[0-9]+>                                           controllers.WebsiteControllers.getEgraph(orderId: Long)
GET     /facebooklogin/callback                                     controllers.WebsiteControllers.getFacebookLoginCallback
GET     /faq                                                        controllers.WebsiteControllers.getFAQ
GET     /inside-an-egraph                                           controllers.WebsiteControllers.getInsideEgraph
GET     /login                                                      controllers.WebsiteControllers.getLogin
POST    /login                                                      controllers.WebsiteControllers.postLogin
GET     /logout                                                     controllers.WebsiteControllers.getLogout
POST    /logout                                                     controllers.WebsiteControllers.postLogout
GET     /orders/$orderId<[0-9]+>/confirm                            controllers.WebsiteControllers.getOrderConfirmation(orderId: Long)
POST    /orders/$orderId<[0-9]+>/configure                          controllers.WebsiteControllers.postOrderPrivacy(orderId: Long)
GET     /privacy                                                    controllers.WebsiteControllers.getPrivacy
POST    /register                                                   controllers.WebsiteControllers.postRegisterConsumerEndpoint
POST    /subscribe                                                  controllers.WebsiteControllers.postSubscribeEmail
GET     /sweepstakes/insider                                        controllers.WebsiteControllers.getInsiderSweepstakes
GET     /terms                                                      controllers.WebsiteControllers.getTerms

GET     /:celebrityUrlSlug                                          controllers.WebsiteControllers.getCelebrityLanding(celebrityUrlSlug: String)
GET     /:celebrityUrlSlug/photos                                   controllers.WebsiteControllers.getStorefrontChoosePhotoTiled(celebrityUrlSlug: String)
GET     /:celebrityUrlSlug/photos/:productUrlSlug                   controllers.WebsiteControllers.getStorefrontChoosePhotoCarousel(celebrityUrlSlug: String, productUrlSlug:String)
POST    /:celebrityUrlSlug/photos/:productUrlSlug                   controllers.WebsiteControllers.postStorefrontChoosePhoto(celebrityUrlSlug: String, productUrlSlug:String)
GET     /:celebrityUrlSlug/photos/:productUrlSlug/personalize       controllers.WebsiteControllers.getStorefrontPersonalize(celebrityUrlSlug: String, productUrlSlug:String)
POST    /:celebrityUrlSlug/photos/:productUrlSlug/personalize       controllers.WebsiteControllers.postStorefrontPersonalize(celebrityUrlSlug: String, productUrlSlug:String)
GET     /:celebrityUrlSlug/photos/:productUrlSlug/review            controllers.WebsiteControllers.getStorefrontReview(celebrityUrlSlug: String, productUrlSlug:String)
POST    /:celebrityUrlSlug/photos/:productUrlSlug/review            controllers.WebsiteControllers.postStorefrontReview(celebrityUrlSlug: String, productUrlSlug:String)
GET     /:celebrityUrlSlug/photos/:productUrlSlug/checkout          controllers.WebsiteControllers.getStorefrontCheckout(celebrityUrlSlug: String, productUrlSlug:String)
POST    /:celebrityUrlSlug/photos/:productUrlSlug/checkout          controllers.WebsiteControllers.postStorefrontCheckout(celebrityUrlSlug: String, productUrlSlug:String)
GET     /:celebrityUrlSlug/photos/:productUrlSlug/finalize          controllers.WebsiteControllers.getStorefrontFinalize(celebrityUrlSlug: String, productUrlSlug:String)
POST    /:celebrityUrlSlug/photos/:productUrlSlug/finalize          controllers.WebsiteControllers.postStorefrontFinalize(celebrityUrlSlug: String, productUrlSlug:String)
GET     /:celebrityUrlSlug/photos/:productUrlSlug/cc-error          controllers.WebsiteControllers.getStorefrontCreditCardError(celebrityUrlSlug: String, productUrlSlug:String, creditCardMsg: Option[String] ?= None)
GET     /:celebrityUrlSlug/photos/:productUrlSlug/no-inventory      controllers.WebsiteControllers.getStorefrontNoInventory(celebrityUrlSlug: String, productUrlSlug:String)
GET     /:celebrityUrlSlug/photos/:productUrlSlug/purchase-error    controllers.WebsiteControllers.getStorefrontPurchaseError(celebrityUrlSlug: String, productUrlSlug:String)

##
## Admin Restricted Functionality - We want to keep certain admin functionality off customer-facing servers.
##
#%{ if (play.configuration.getProperty('admin.tools.enabled') == 'full') }%
GET     /admin/printorders                                          controllers.WebsiteControllers.getPrintOrdersAdmin(filter: String = "unfulfilled", page: Int = 1)
GET     /admin/printorders/{printOrderId}                           controllers.WebsiteControllers.getPrintOrderAdmin(printOrderId: Long)
#POST    /admin/printorders/{printOrderId}                           controllers.WebsiteControllers.postPrintOrderAdmin(printOrderId: Long)
POST    /:celebrityUrlSlug}/:productUrlSlug/buy-demo                controllers.WebsiteControllers.postBuyDemoProduct(celebrityUrlSlug: String, productUrlSlug: String)

GET     /assets/*file                                               controllers.RemoteAssets.at(path="/public", file)

# Redirect any requests with trailing slashes to the slash-less version.
GET     $resourcePath<.*>/                                          controllers.SlayTrailingSlashesController.slayTrailingSlashes(resourcePath)
