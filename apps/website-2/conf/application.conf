# This is the main configuration file for the application.
# ~~~~~
application.name=eGraphsServers

application.id = test

# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode=dev
%live.application.mode=prod
%boron.application.mode=prod
%demo.application.mode=prod
%staging.application.mode=prod
%carbon.application.mode=prod

%live.application.id=live
%boron.application.id=boron
%demo.application.id=demo
%staging.application.id=staging
%carbon.application.id=carbon


# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=vccYaWUIWPOpqXbRD7xNdj31qWMUUzCQMaP0Ri76UlB1A3HIfIc2YtBRKvthwKoG

# Url-resolving
# ~~~~~~
application.baseUrl="http://localhost:9000/"
%live.application.baseUrl="https://www.egraphs.com/"
%boron.application.baseUrl="https://www.egraphs.com/"
%demo.application.baseUrl="https://beta.egraphs.com/"
%staging.application.baseUrl="https://staging.egraphs.com/"
%hydrogen.application.baseUrl="http://hydrogen.egraphs.com/"
%carbon.application.baseUrl="http://sony.egraphs.com/"

# Https enforcement
# ~~~~~~
application.httpsOnly=false
%live.application.httpsOnly=true
%boron.application.httpsOnly=true
%demo.application.httpsOnly=true
%staging.application.httpsOnly=true
%hydrogen.application.httpsOnly=false
%carbon.application.httpsOnly=true

# Admin Access Level
# ~~~~~~
# We want to keep certain admin functionality off consumer-facing servers.
# Options are:
#   full - All admin functionality can be accessed in this application configuration.
#   restricted - Certain hardware-intensive admin functionality is not available in this application configuration.
admin.tools.enabled=full
%live.admin.tools.enabled=restricted

# Less CSS configuration
# ~~~~~
# Enables an "Eternal" cache of less Last-Modified headers.
# This prevents the less plugin from going to disk to check if the file
# is modified on each request, which is expensive when we're using a big
# CSS framework like Twitter Bootstrap.
lesscss.eternalcache=false
%live.lesscss.eternalcache=true
%boron.lesscss.eternalcache=true
%demo.lesscss.eternalcache=true
%staging.lesscss.eternalcache=true
%hydrogen.lesscss.eternalcache=true
%carbon.lesscss.eternalcache=true

#
# Payment Configuration
# ~~~~
# Keys used to interact with our payment solution.

# What service provides our payment implementation? Options:
#   'yesmaam' - always accepts all payments regardless of input.
#   'stripetest' - delegates payment processing to stripe using test account.
#   'stripe' - delegates payment processing to stripe using live account.
payment.vendor=yesmaam
%live.payment.vendor=stripe
%boron.payment.vendor=stripe
%demo.payment.vendor=stripetest
%hydrogen.payment.vendor=stripetest

# Use our test stripe keys in all environments except live. Only use live stripe keys on live.
stripe.key.publishable = pk_qIGUDirehUxj2GTFwgeRBkOfHIWdX
stripe.key.secret = pvESi1GjhD9e8RFQQPfeH8mHZ2GIyqQV
%live.stripe.key.publishable = pk_Z0zfJlLzGoi69QweXaKTC1TSAYWPt
%boron.stripe.key.publishable = pk_Z0zfJlLzGoi69QweXaKTC1TSAYWPt
%live.stripe.key.secret = hQZcajnV5Ds1lOYtEZ0hfRazFXQgZ8fD
%boron.stripe.key.secret = hQZcajnV5Ds1lOYtEZ0hfRazFXQgZ8fD


# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
# application.langs=fr,en,ja

# Date format
# ~~~~~
date.format=yyyy-MM-dd
# date.format.fr=dd/MM/yyyy


# Large file (Blob) storage
# ~~~~~
# Configuration for our blob storage solution, which is
# Amazon S3 in production and the file system when testing.
#

# Blobstore provider. Governs storage of egraph images, signature json, audio, other large
# binary streams.
#  "filesystem" - Stores blobs on the local file system
#  "s3" - Stores blobs on Amazon's Simple Storage Service (S3)
blobstore.vendor=filesystem
%live.blobstore.vendor=s3
%boron.blobstore.vendor=s3
%demo.blobstore.vendor=s3
%staging.blobstore.vendor=s3
%hydrogen.blobstore.vendor=s3
%carbon.blobstore.vendor=s3

# Namespace for our blobs. In S3 this is the bucket, and on the filesystem
# it's a folder.
blobstore.namespace=egraphs-test
%live.blobstore.namespace=egraphs
%boron.blobstore.namespace=egraphs
%demo.blobstore.namespace=egraphs-demo
%staging.blobstore.namespace=egraphs-staging
%hydrogen.blobstore.namespace=egraphs-hydrogen
%carbon.blobstore.namespace=egraphs-carbon

# Namespace for our static resource blobs on S3. This includes media and other large files.
staticresources.blobstore.namespace=egraphs-static-resources

# S3 credentials
s3.id=AKIAJ33ZTKZIPYXRC66A
s3.secret="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"

# Whether to allow programmatic scrubbing of the blobstore. Should be "no" everywhere except locally.
blobstore.allowscrub=yes
%live.blobstore.allowscrub=no
%boron.blobstore.allowscrub=no
%demo.blobstore.allowscrub=no
%staging.blobstore.allowscrub=no
%hydrogen.blobstore.allowscrub=no
%carbon.blobstore.allowscrub=no


# Content Delivery Network (CDN)
# ~~~~~
#
# Specify and enable / disable CDN hosting of /public folder and S3 blobs.
#
# cdn.enabled -- true or false for whether public and blob assets should be
#   served via CDN.
#
# cloudfront.domain -- Domain on Amazon Cloudfront that reverse-proxy's this
#   specific application's /public/* and S3 URLs. See Cloudfront configuration in
#   the AWS console for more info about the domains listed.
#
cdn.enabled=false
%live.cdn.enabled=true
%boron.cdn.enabled=false
%demo.cdn.enabled=false
%staging.cdn.enabled=false
%hydrogen.cdn.enabled=false
%carbon.cdn.enabled=false

# Domains for cloudfront, our Content Data Network. Depends on cdn.enabled.
cloudfront.domain=egraphs-test.edge.egraphs.com
%live.cloudfront.domain=d3kp0rxeqzwisk.cloudfront.net
%boron.cloudfront.domain=d3kp0rxeqzwisk.cloudfront.net
%demo.cloudfront.domain=d1iluzrtppeanh.cloudfront.net
%staging.cloudfront.domain=dghwus7pg7sz4.cloudfront.net
%hydrogen.cloudfront.domain=dnyqork1gzkzp.cloudfront.net


# Database configuration
# ~~~~~ 

# Whether to allow programmatic scrubbing of the database. Should be "no" everywhere except locally.
db.default.allowscrub=yes
%live.db.allowscrub=no
%boron.db.allowscrub=no
%demo.db.allowscrub=no
%staging.db.allowscrub=no
%hydrogen.db.allowscrub=no
%carbon.db.allowscrub=no

# To quickly set up a development database, use either:
#   - mem : for a transient in memory database (H2 in memory)
#   - fs  : for a simple file written database (H2 file stored)
# db=mem
db.default.url="jdbc:postgresql://localhost/egraphs"
db.default.driver=org.postgresql.Driver
db.default.user=root
db.default.pass=postgres

# Cloudbees database URL. See Cloudbees console for more info.
%live.db.url="jdbc:postgresql://23.21.137.254:9999/egraphs"
%live.db.driver=org.postgresql.Driver
%live.db.user=enterprisedb
%live.db.pass=448f4612c39f941
%boron.db.url="jdbc:postgresql://23.21.137.254:9999/egraphs"
%boron.db.driver=org.postgresql.Driver
%boron.db.user=enterprisedb
%boron.db.pass=448f4612c39f941

%demo.db.url="jdbc:postgresql://23.23.126.137:9999/egraphs"
%demo.db.driver=org.postgresql.Driver
%demo.db.user=enterprisedb
%demo.db.pass=6S5jiZiHoIerPkI
%staging.db.url="jdbc:postgresql://107.21.229.179:9999/egraphs"
%staging.db.driver=org.postgresql.Driver
%staging.db.user=postgres
%staging.db.pass=92DjQBSahKzq6jt
%hydrogen.db.url="jdbc:postgresql://23.21.194.63:9999/egraphs"
%hydrogen.db.driver=org.postgresql.Driver
%hydrogen.db.user=postgres
%hydrogen.db.pass=ULNG9KbPNRk98h3
%carbon.db.url="jdbc:postgresql://23.23.112.237:9999/egraphs"
%carbon.db.driver=org.postgresql.Driver
%carbon.db.user=postgres
%carbon.db.pass=8ZpQQymN8aUsNul

# Whether to check the database schema state before each request in DEV mode or before application start in PROD mode.
evolutions.enabled=false
%live.evolutions.enabled=true
%boron.evolutions.enabled=true
%demo.evolutions.enabled=true
%staging.evolutions.enabled=true
%hyrogen.evolutions.enabled=true
%carbon.evolutions.enabled=true

# Connections pool configuration:
db.default.pool.timeout=1000
db.default.pool.maxSize=9
db.default.pool.minSize=1
db.default.pool.maxIdleTimeExcessConnections=300

%live.db.pool.maxSize=9
%live.db.pool.minSize=5
%boron.db.pool.maxSize=9
%boron.db.pool.minSize=5
%demo.db.pool.maxSize=9
%demo.db.pool.minSize=1
%staging.db.pool.maxSize=9
%staging.db.pool.minSize=1
%hydrogen.db.pool.maxSize=5
%hydrogen.db.pool.minSize=1
%carbon.db.pool.maxSize=5
%carbon.db.pool.minSize=1

# Hosting configuration
# ~~~~~
# Configure our website hosting.
#

# Cloudbees
bees.api.key=06B0F1905A5648B7
bees.api.secret="KL7DFBUNIZDOWQ67G6D1M5XKYTVPLRDWHS1COTCNU60="
bees.api.domain=egraphs

%live.bees.api.name=egraphs-alpha
%boron.bees.api.name=boron
%demo.bees.api.name=demo
%staging.bees.api.name=staging
%hydrogen.bees.api.name=hydrogen
%carbon.bees.api.name=carbon

# Mail configuration
# ~~~~~
# Configurations for transactional mail
# Default is to use a mock Mailer
smtp.mock=true

%live.smtp.mock=false
%live.smtp.host=smtp.gmail.com
%live.smtp.port=465
%live.smtp.ssl=yes
%live.smtp.user="webserver@egraphs.com"
%live.smtp.password=nqEJvVQsYaop1pD
%boron.smtp.mock=false
%boron.smtp.host=smtp.gmail.com
%boron.smtp.port=465
%boron.smtp.ssl=yes
%boron.smtp.user="webserver@egraphs.com"
%boron.smtp.password=nqEJvVQsYaop1pD
%demo.smtp.mock=false
%demo.smtp.host=smtp.gmail.com
%demo.smtp.port=465
%demo.smtp.ssl=yes
%demo.smtp.user="webserver@egraphs.com"
%demo.smtp.password=nqEJvVQsYaop1pD
%staging.smtp.mock=false
%staging.smtp.host=smtp.gmail.com
%staging.smtp.port=465
%staging.smtp.ssl=yes
%staging.smtp.user="webserver@egraphs.com"
%staging.smtp.password=nqEJvVQsYaop1pD
%carbon.smtp.mock=false
%carbon.smtp.host=smtp.gmail.com
%carbon.smtp.port=465
%carbon.smtp.ssl=yes
%carbon.smtp.user="webserver@egraphs.com"
%carbon.smtp.password=nqEJvVQsYaop1pD

# Configuration for bulkmail
mail.bulk.vendor=mock
#mail.bulk.vendor=mailchimp
mail.bulk.apikey=2719c3066cc820026cc9ef0f428f2cfa-us5
mail.bulk.datacenter=us5
mail.bulk.newsletterid=70f32912bf
%live.mail.bulk.vendor=mailchimp
%live.mail.bulk.apikey=2719c3066cc820026cc9ef0f428f2cfa-us5
%live.mail.bulk.datacenter=us5
%live.mail.bulk.newsletterid=70f32912bf
%boron.mail.bulk.vendor=mock
%demo.mail.bulk.vendor=mock
%staging.mail.bulk.vendor=mock
%carbon.mail.bulk.vendor=mock



# Redis Cache configuration
# ~~~~~
# Enable redis via the redis plugin (https://github.com/tkral/play-redis)
#
# Additionally, we map each application to a different db / keyspace (0 - 16)
# by following the term "redis" with a number ".0", ".1", etc.
# If no namespace is specified it will use .5 by default.
#

redis.url="redis://redis_lacks_usernames:j9BwIGcX2GrpuMQY45OU@ec2-23-22-221-28.compute-1.amazonaws.com:6379"
application.cache=memory
%live.application.cache=redis.1
%boron.application.cache=redis.1
%demo.application.cache=redis.2
%staging.application.cache=redis.3
%hydrogen.application.cache=redis.4

# Admin Review: If true, then Orders and Egraphs are automatically approved, bypassing admin approval flows.
# ~~~~~~
adminreview.skip=false
%staging.adminreview.skip=true
%carbon.adminreview.skip=true

# Biometrics Online Status: Use this to specify whether biometrics are currently "offline"
# ~~~~~~
biometrics.status=""

#
# Signature Biometrics Configuration
# ~~~~

# What service provides our payment implementation? Options:
#   'yesmaam' - always enrolls and verifies.
#   'xyzmoprod' - our live Xyzmo server for production Celebrities
#   'xyzmobeta' - our live Xyzmo server for test Celebrities
signature.vendor=yesmaam
%live.signature.vendor=xyzmoprod
%boron.signature.vendor=xyzmoprod
%demo.signature.vendor=xyzmobeta


#
# Voice Biometrics Configuration
# ~~~~

# What service provides our payment implementation? Options:
#   'yesmaam' - always enrolls and verifies.
#   'fsdev' - dev account for Free Speech engine at VBG.
#   'fsprod' - prod account for Free Speech engine at VBG for production Celebrities
#   'fsbeta' - prod account for Free Speech engine at VBG for test Celebrities
voice.vendor=yesmaam
%live.voice.vendor=fsprod
%boron.voice.vendor=fsprod
%demo.voice.vendor=fsbeta


#
# Facebook Integration
# ~~~~
fb.appid=fbappid.doesnotwork
fb.appsecret=fbappsecret.doesnotwork
%live.fb.appid=156115741184892
%live.fb.appsecret=5c7355374b6a1c7847e75a32b6d5f08a
%boron.fb.appid=156115741184892
%boron.fb.appsecret=5c7355374b6a1c7847e75a32b6d5f08a
%demo.fb.appid=383371221728194
%demo.fb.appsecret=a4a3a09ced1873fb9adaf8e182659a12
%staging.fb.appid=375687459147542
%staging.fb.appsecret=d38e551a2eb9b7c97fbb3bfb2896d426


# iPad Build Version: The version of the iPad build to distribute to users of this server application.
# ~~~~~~
ipad.buildversion=1_2_4_2
%carbon.ipad.buildversion=1_2_3_11

#
# JVM Configuration
# ~~~~
#
jvm.memory="-Xmx2048M -Xms32M -XX:MaxPermSize=2048M"

#######
####### OTHER CONFIGURATION OPTIONS THAT WE HAVEN'T CUSTOMIZED
#######

# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
# http.port=9000
#
# By default the server listen for HTTP on the wilcard address.
# You can restrict this.
# http.address=127.0.0.1
#
# Use this if you don't host your Play application at the root of the domain
# you're serving it from. This parameter has no effect when deployed as a
# war, because the path will be handled by the application server.
# http.path=/

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
# application.session.cookie=PLAY
# application.session.maxAge=1h
# application.session.secure=false

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com

# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
# jpda.port=8000
#
# Java source level => 1.5, 1.6 or 1.7 (experimental)
# java.source=1.5

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory
# application.log=INFO
#
# More logging configuration
# application.log.path=/log4j.properties
# application.log.system.out=off

#
# If you want to reuse an existing Datasource from your application server, use:
# db=java:/comp/env/jdbc/myDatasource
#
# When using an existing Datasource, it's sometimes needed to destroy it when
# the application is stopped. Depending on the datasource, you can define a
# generic "destroy" method :
# db.destroyMethod=close

# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
# jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
#
# Specify the ddl generation pattern to use. Set to none to disable it
# (default to update in DEV mode, and none in PROD mode):
# jpa.ddl=update
#
# Debug SQL statements (logged using DEBUG level):
# jpa.debugSQL=true
#
# You can even specify additional hibernate properties here:
# hibernate.use_sql_comments=true
# ...
#
# Store path for Blob content
attachments.path=data/attachments

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# http.cacheControl=3600

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
# http.useETag=true

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
# play.jobs.pool=10

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
# play.pool=3

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s
